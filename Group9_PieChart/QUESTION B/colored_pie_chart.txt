#include <GL/glut.h>
#include <cmath>
#include <cstdio>
#include <string>

const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 800;

// Data for the pie chart
static float values[] = {36.0f, 41.0f, 19.0f, 28.0f, 30.0f, 16.0f};
static const char *labels[] = {"Avocado", "Orange", "Banana", "Kiwifruit", "Mangos", "Grapes"};

// Fruit colors (R, G, B)
static float colors[][3] = {
    {0.82f, 0.81f, 0.41f},  // Avocado
    {0.93f, 0.55f, 0.14f},  // Orange
    {1.0f, 0.87f, 0.35f},   // Banana
    {0.43f, 0.51f, 0.04f},  // Kiwifruit
    {1.0f, 0.51f, 0.26f},   // Mango
    {0.44f, 0.18f, 0.66f}   // Grapes
};

static const int NUM_SLICES = sizeof(values) / sizeof(values[0]);
static const char *chartTitle = "Youth Fruit Preferences in Gachororo";

const float PI = 3.14159265f;

void drawBitmapText(float x, float y, const char *string) {
    glRasterPos2f(x, y);
    for (const char *c = string; *c != '\0'; c++) {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, *c);
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    float total = 0.0f;
    for (int i = 0; i < NUM_SLICES; ++i) {
        total += values[i];
    }

    float centerX = 0.0f;
    float centerY = 0.0f;
    float radius = 0.6f;
    float currentAngle = 0.0f;

    // Draw title
    glColor3f(0.0f, 0.0f, 0.0f);
    drawBitmapText(-0.4f, 0.9f, chartTitle);

    // Draw pie slices with colors
    for (int i = 0; i < NUM_SLICES; ++i) {
        float sliceAngle = 360.0f * values[i] / total;
        
        // Draw filled slice
        glColor3f(colors[i][0], colors[i][1], colors[i][2]);
        glBegin(GL_TRIANGLE_FAN);
        glVertex2f(centerX, centerY);
        for (float angle = currentAngle; angle <= currentAngle + sliceAngle; angle += 1.0f) {
            float rad = angle * PI / 180.0f;
            glVertex2f(centerX + cos(rad) * radius, centerY + sin(rad) * radius);
        }
        float endRad = (currentAngle + sliceAngle) * PI / 180.0f;
        glVertex2f(centerX + cos(endRad) * radius, centerY + sin(endRad) * radius);
        glEnd();

        // Draw slice border
        glColor3f(0.0f, 0.0f, 0.0f);
        glLineWidth(1.0f);
        glBegin(GL_LINE_LOOP);
        glVertex2f(centerX, centerY);
        for (float angle = currentAngle; angle <= currentAngle + sliceAngle; angle += 1.0f) {
            float rad = angle * PI / 180.0f;
            glVertex2f(centerX + cos(rad) * radius, centerY + sin(rad) * radius);
        }
        glEnd();

        // Calculate label position
        float midAngle = currentAngle + sliceAngle / 2.0f;
        float midRad = midAngle * PI / 180.0f;
        float labelRadius = radius + 0.15f;
        
        // Adjust specific label positions if needed
        if (i == 2) labelRadius += 0.1f;  // Banana
        if (i == 3) labelRadius += 0.05f; // Kiwi
        
        float labelX = centerX + cos(midRad) * labelRadius;
        float labelY = centerY + sin(midRad) * labelRadius;

        // Create label text with percentage
        char labelText[50];
        sprintf(labelText, "%s (%.1f%%)", labels[i], 100.0f * values[i] / total);
        
        // Draw label
        glColor3f(0.0f, 0.0f, 0.0f);
        drawBitmapText(labelX - 0.05f, labelY - 0.02f, labelText);

        currentAngle += sliceAngle;
    }

    glutSwapBuffers();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow("Fruit Preferences Pie Chart");
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // White background
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMainLoop();
    return 0;
}